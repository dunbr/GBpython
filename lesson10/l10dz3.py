# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны
# быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение
# (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и округление до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт
# строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт строку:
# *****\n*****\n*****.


class Cell:
    def __init__(self, unit):
        self.unit = unit
    def __add__(self, other):
        return Cell(self.unit + other.unit)

    def __sub__(self, other):
        if self.unit > other.unit:
            return Cell(self.unit - other.unit)
        else:
            return 'Невозозможно выполнить опреацию вычитания'

    def __mul__(self, other):
        return Cell(self.unit * other.unit)

    def __truediv__(self, other):
        return Cell(self.unit // other.unit)

    def make_order(self, unit_of_row):
        c = self.unit
        u = unit_of_row
        x = c // u  # 2
        z = u * "*" + "\n"
        n = (c - u * x) * "*"
        print(x * z + n)
    def __str__(self):
        return f'units: {self.unit}'


cell_1 = Cell(10)
cell_2 = Cell(7)
print(cell_2)
cell_3 = cell_1+ cell_2
cell_1.make_order(3)
print(cell_3)
